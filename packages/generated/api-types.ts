/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/healthz': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Liveness check
     * @description 軽量なヘルスチェック（依存関係に触れない）
     */
    get: operations['getLiveness'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/readyz': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Readiness check
     * @description 準備状態確認（Supabase/Storage への到達確認）
     */
    get: operations['getReadiness'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/diag': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Diagnostics (auth required)
     * @description 詳細診断情報（認証必須）
     */
    get: operations['getDiagnostics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/images': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List user images
     * @description ユーザーの画像一覧を取得
     */
    get: operations['listImages'];
    put?: never;
    /**
     * Upload image
     * @description 画像をアップロード
     */
    post: operations['uploadImage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/images/{imageId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete image
     * @description 画像を削除
     */
    delete: operations['deleteImage'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current user
     * @description 現在のユーザー情報を取得
     */
    get: operations['getCurrentUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update current user last login
     * @description 現在のユーザーの最終ログイン時刻を更新
     */
    patch: operations['updateCurrentUserLastLogin'];
    trace?: never;
  };
  '/api/users/me/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current user statistics
     * @description 現在のユーザーの統計情報を取得
     */
    get: operations['getCurrentUserStats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    LivenessResponse: {
      /**
       * @description サービスの生存状態
       * @enum {string}
       */
      status: 'ok';
      /**
       * Format: date-time
       * @description チェック実行時刻
       */
      timestamp: string;
    };
    ReadinessResponse: {
      /**
       * @description サービスの準備状態
       * @enum {string}
       */
      status: 'ok' | 'degraded' | 'down';
      /** @description 依存関係のヘルスチェック結果 */
      dependencies: components['schemas']['HealthCheck'][];
      /** @description アプリケーションバージョン */
      version: string;
      /** @description Gitコミットハッシュ */
      commit: string;
      /**
       * Format: date-time
       * @description ビルド時刻
       */
      buildTime: string;
    };
    DiagnosticsResponse: {
      /**
       * @description サービスの診断状態
       * @enum {string}
       */
      status: 'ok' | 'degraded' | 'down';
      /** @description 依存関係のヘルスチェック結果 */
      dependencies: components['schemas']['HealthCheck'][];
      /** @description アプリケーションバージョン */
      version: string;
      /** @description Gitコミットハッシュ */
      commit: string;
      /**
       * Format: date-time
       * @description ビルド時刻
       */
      buildTime: string;
      /** @description 詳細診断情報 */
      diagnostics: {
        memory?: {
          /** @description 使用メモリ量（MB） */
          used?: number;
          /** @description 総メモリ量（MB） */
          total?: number;
        };
        /** @description 稼働時間（秒） */
        uptime?: number;
        /** @description 処理済みリクエスト数 */
        requestCount?: number;
      };
    };
    HealthCheck: {
      /** @description チェック対象の名前 */
      name: string;
      /**
       * @description チェック結果
       * @enum {string}
       */
      status: 'ok' | 'degraded' | 'down';
      /** @description レスポンス時間（ミリ秒） */
      latency?: number;
      /** @description エラーメッセージ（エラー時のみ） */
      error?: string;
    };
    ImageResponse: {
      /**
       * Format: uuid
       * @description 画像ID
       */
      id: string;
      /** @description ファイル名 */
      filename: string;
      /**
       * @description 画像の処理状態
       * @enum {string}
       */
      status: 'uploading' | 'processing' | 'ready' | 'failed';
      /** @description ファイルサイズ（バイト） */
      fileSize?: number;
      /** @description MIMEタイプ */
      mimeType?: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt?: string;
    };
    ImageListResponse: {
      /** @description 画像一覧 */
      images: components['schemas']['ImageResponse'][];
      pagination: components['schemas']['Pagination'];
    };
    Pagination: {
      /** @description 現在のページ番号 */
      page: number;
      /** @description 1ページあたりの件数 */
      limit: number;
      /** @description 総件数 */
      total: number;
      /** @description 次のページが存在するか */
      hasNext: boolean;
    };
    UserResponse: {
      /**
       * Format: uuid
       * @description ユーザーID
       */
      id: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
      /**
       * Format: date-time
       * @description 最終ログイン日時
       */
      lastLoginAt: string;
    };
    UserStatsResponse: {
      /** @description 登録からの経過日数 */
      ageDays: number;
      /** @description 最終ログインからの経過日数 */
      daysSinceLastLogin: number;
      /** @description アクティブユーザーかどうか */
      isActive: boolean;
    };
    ErrorResponse: {
      /** @description エラーコード */
      code: string;
      /** @description エラーメッセージ */
      message: string;
      /** @description エラーの詳細情報 */
      details?: {
        [key: string]: unknown;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getLiveness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Service is alive */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LivenessResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getReadiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Service is ready */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReadinessResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Service is not ready */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReadinessResponse'];
        };
      };
    };
  };
  getDiagnostics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Diagnostic information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DiagnosticsResponse'];
        };
      };
      /** @description Authentication required */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  listImages: {
    parameters: {
      query?: {
        /** @description ページ番号 */
        page?: number;
        /** @description 1ページあたりの件数 */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Image list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ImageListResponse'];
        };
      };
      /** @description Authentication required */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  uploadImage: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description アップロードする画像ファイル
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description Image uploaded successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ImageResponse'];
        };
      };
      /** @description Invalid file or validation error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Authentication required */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Validation error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deleteImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 削除する画像のID */
        imageId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Image deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Authentication required */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden - not owner of the image */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Image not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current user information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResponse'];
        };
      };
      /** @description Authentication required */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  updateCurrentUserLastLogin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User last login updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResponse'];
        };
      };
      /** @description Authentication required */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getCurrentUserStats: {
    parameters: {
      query?: {
        /** @description 非アクティブと判定する日数 */
        inactiveDays?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User statistics */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserStatsResponse'];
        };
      };
      /** @description Authentication required */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Validation error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
}
