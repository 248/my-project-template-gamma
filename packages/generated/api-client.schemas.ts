/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Template Gamma API
 * Next.js 15.5.2 + React 19.0.0 template for Cloudflare Workers with OpenNext
 * OpenAPI spec version: 1.0.0
 */
/**
 * サービスの生存状態
 */
export type LivenessResponseStatus =
  (typeof LivenessResponseStatus)[keyof typeof LivenessResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LivenessResponseStatus = {
  ok: 'ok',
} as const;

export interface LivenessResponse {
  /** サービスの生存状態 */
  status: LivenessResponseStatus;
  /** チェック実行時刻 */
  timestamp: string;
}

/**
 * サービスの準備状態
 */
export type ReadinessResponseStatus =
  (typeof ReadinessResponseStatus)[keyof typeof ReadinessResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReadinessResponseStatus = {
  ok: 'ok',
  degraded: 'degraded',
  down: 'down',
} as const;

export interface ReadinessResponse {
  /** サービスの準備状態 */
  status: ReadinessResponseStatus;
  /** 依存関係のヘルスチェック結果 */
  dependencies: HealthCheck[];
  /** アプリケーションバージョン */
  version: string;
  /** Gitコミットハッシュ */
  commit: string;
  /** ビルド時刻 */
  buildTime: string;
}

/**
 * サービスの診断状態
 */
export type DiagnosticsResponseStatus =
  (typeof DiagnosticsResponseStatus)[keyof typeof DiagnosticsResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiagnosticsResponseStatus = {
  ok: 'ok',
  degraded: 'degraded',
  down: 'down',
} as const;

export type DiagnosticsResponseDiagnosticsMemory = {
  /** 使用メモリ量（MB） */
  used?: number;
  /** 総メモリ量（MB） */
  total?: number;
};

/**
 * 詳細診断情報
 */
export type DiagnosticsResponseDiagnostics = {
  memory?: DiagnosticsResponseDiagnosticsMemory;
  /** 稼働時間（秒） */
  uptime?: number;
  /** 処理済みリクエスト数 */
  requestCount?: number;
};

export interface DiagnosticsResponse {
  /** サービスの診断状態 */
  status: DiagnosticsResponseStatus;
  /** 依存関係のヘルスチェック結果 */
  dependencies: HealthCheck[];
  /** アプリケーションバージョン */
  version: string;
  /** Gitコミットハッシュ */
  commit: string;
  /** ビルド時刻 */
  buildTime: string;
  /** 詳細診断情報 */
  diagnostics: DiagnosticsResponseDiagnostics;
}

/**
 * チェック結果
 */
export type HealthCheckStatus =
  (typeof HealthCheckStatus)[keyof typeof HealthCheckStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HealthCheckStatus = {
  ok: 'ok',
  degraded: 'degraded',
  down: 'down',
} as const;

export interface HealthCheck {
  /** チェック対象の名前 */
  name: string;
  /** チェック結果 */
  status: HealthCheckStatus;
  /** レスポンス時間（ミリ秒） */
  latency?: number;
  /** エラーメッセージ（エラー時のみ） */
  error?: string;
}

/**
 * 画像の処理状態
 */
export type ImageResponseStatus =
  (typeof ImageResponseStatus)[keyof typeof ImageResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageResponseStatus = {
  uploading: 'uploading',
  processing: 'processing',
  ready: 'ready',
  failed: 'failed',
} as const;

export interface ImageResponse {
  /** 画像ID */
  id: string;
  /** ファイル名 */
  filename: string;
  /** 画像の処理状態 */
  status: ImageResponseStatus;
  /** ファイルサイズ（バイト） */
  fileSize?: number;
  /** MIMEタイプ */
  mimeType?: string;
  /** 作成日時 */
  createdAt: string;
  /** 更新日時 */
  updatedAt?: string;
}

export interface ImageListResponse {
  /** 画像一覧 */
  images: ImageResponse[];
  pagination: Pagination;
}

export interface Pagination {
  /**
   * 現在のページ番号
   * @minimum 1
   */
  page: number;
  /**
   * 1ページあたりの件数
   * @minimum 1
   */
  limit: number;
  /**
   * 総件数
   * @minimum 0
   */
  total: number;
  /** 次のページが存在するか */
  hasNext: boolean;
}

/**
 * エラーの詳細情報
 */
export type ErrorResponseDetails = { [key: string]: unknown };

export interface ErrorResponse {
  /** エラーコード */
  code: string;
  /** エラーメッセージ */
  message: string;
  /** エラーの詳細情報 */
  details?: ErrorResponseDetails;
}

export type ListImagesParams = {
  /**
   * ページ番号
   * @minimum 1
   */
  page?: number;
  /**
   * 1ページあたりの件数
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type UploadImageBody = {
  /** アップロードする画像ファイル */
  file: Blob;
};
